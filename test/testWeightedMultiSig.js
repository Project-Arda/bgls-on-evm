
const WeightedMultiSig = artifacts.require("WeightedMultiSig");
const WMSTestProxy = artifacts.require("WMSTestProxy");

contract("WeightedMultiSig", async (accounts) =>  {
  let WMS;
  let WMSt;
  function promiseToThrow(p, msg) {
    return p.then(_ => false).catch(_ => true).then(res =>
      assert(res, msg));
   }
  beforeEach(async () => {
    WMS = await WeightedMultiSig.new(67,[
      "9121282642809701931333593728297233225556711250127745709186816755779879923737",
      "19430493116922072356830709910231609246608721301711710668649991649389881488730",
      "20422461965303760684972432833393275482011872214285431434762613176151735978626",
      "298572075162454679163670333497954782367165699328351139754869100063308445382",
      "13617110937608119725159715497522173305174557569388165671955816638318382445127"
    ],[
      "8783642022119951289582979607207867126556038468480503109520224385365741455513",
      "4110959498627045907440291871300490703579626657177845575364169615082683328588",
      "4340414105609005319657729201597518376025644764079088797074616044782247204946",
      "19406526149564276287084583577153409216667341395977223898932369699699605058292",
      "5989220236822003292279415228814579004737160217409816506111930966995235750604"
    ],[20,20,20,20,20]);
    WMSt = await WMSTestProxy.new(67,[
      "9121282642809701931333593728297233225556711250127745709186816755779879923737",
      "19430493116922072356830709910231609246608721301711710668649991649389881488730",
      "20422461965303760684972432833393275482011872214285431434762613176151735978626",
      "298572075162454679163670333497954782367165699328351139754869100063308445382",
      "13617110937608119725159715497522173305174557569388165671955816638318382445127"
    ],[
      "8783642022119951289582979607207867126556038468480503109520224385365741455513",
      "4110959498627045907440291871300490703579626657177845575364169615082683328588",
      "4340414105609005319657729201597518376025644764079088797074616044782247204946",
      "19406526149564276287084583577153409216667341395977223898932369699699605058292",
      "5989220236822003292279415228814579004737160217409816506111930966995235750604"
    ],[20,20,20,20,20]);
  })
  it("should verify maximum quorum correctly", async () => {
    let res = await WMS.isQuorum.call("0xff");
    assert.equal(res,true);
  });
  it("should block null quorum", async () => {
    let res = await WMS.isQuorum.call("0x00");
    assert.equal(res,false);
  })
  it("should pass with 4 of 5", async () => {
    assert.equal(await WMS.isQuorum.call("0x1e"), true);
    assert.equal(await WMS.isQuorum.call("0x1d"), true);
    assert.equal(await WMS.isQuorum.call("0x1b"), true);
    assert.equal(await WMS.isQuorum.call("0x17"), true);
    assert.equal(await WMS.isQuorum.call("0x0f"), true);
  })
  it("should fail with 3 of 5", async () => {
    assert.equal(await WMS.isQuorum.call("0x07"), false);
    assert.equal(await WMS.isQuorum.call("0x0b"), false);
    assert.equal(await WMS.isQuorum.call("0x0d"), false);
    assert.equal(await WMS.isQuorum.call("0x0e"), false);
    assert.equal(await WMS.isQuorum.call("0x13"), false);
    assert.equal(await WMS.isQuorum.call("0x15"), false);
    assert.equal(await WMS.isQuorum.call("0x16"), false);
    assert.equal(await WMS.isQuorum.call("0x19"), false);
    assert.equal(await WMS.isQuorum.call("0x1a"), false);
    assert.equal(await WMS.isQuorum.call("0x1c"), false);
  })
  it("should check aggregate keys against pair keys correctly (1)", async () => {
    assert(await WMSt.testPairKey1.call());
  })
  it("should check aggregate keys against pair keys correctly (2)", async () => {
    assert(await WMSt.testPairKey2.call());
  })
  it("should check aggregate keys against pair keys correctly (3)", async () => {
    assert(await WMSt.testPairKey3.call());
  })
  it("should check aggregate keys against pair keys correctly (4)", async () => {
    assert(await WMSt.testPairKey4.call());
  })
  it("should check aggregate keys against pair keys correctly (5)", async () => {
    assert(await WMSt.testPairKey5.call());
  })

  it("should be able to update with 4/5 of equal weight", async () => {
    assert(await WMS.updateState.call(1, [1, 67,
      "9121282642809701931333593728297233225556711250127745709186816755779879923737",
      "8783642022119951289582979607207867126556038468480503109520224385365741455513",
      100
    ], "0x0f",
    "2948269716085502948790009686650452414675481763019106577396688261393573590418", //sigX
    "4670268754090224810492676966567128460691441819810059675575673092251639253273", //sigy
    "2716981870054376425540623498944271869143173296821421331478826053599476430854", //pkxi
    "4207954545713722779397243242064268224396102704576018253000218082904392461892", //pkxr
    "15016217483528080919615640796038236162852104966225325968042839587187338783249", //pkyi
    "14823056799673950316800545417245630398819170129662340134056907505652527393991")); //pkyr
  })
  it("should fail with modified sig", async () => {
    promiseToThrow(WMS.updateState.call(1, [1, 67,
      "9121282642809701931333593728297233225556711250127745709186816755779879923737",
      "8783642022119951289582979607207867126556038468480503109520224385365741455513",
      100
    ], "0x0f",
    "2948269716085502948790009686650452414675481763019106577396688261393573590417", //sigX
    "4670268754090224810492676966567128460691441819810059675575673092251639253273", //sigy
    "2716981870054376425540623498944271869143173296821421331478826053599476430854", //pkxi
    "4207954545713722779397243242064268224396102704576018253000218082904392461892", //pkxr
    "15016217483528080919615640796038236162852104966225325968042839587187338783249", //pkyi
    "14823056799673950316800545417245630398819170129662340134056907505652527393991"), //pkyr
    "modified sig");
  })
  it("should fail with modified pubkey", async () => {
    promiseToThrow(WMS.updateState.call(1, [1, 67,
      "9121282642809701931333593728297233225556711250127745709186816755779879923737",
      "8783642022119951289582979607207867126556038468480503109520224385365741455513",
      100
    ], "0x0f",
    "2948269716085502948790009686650452414675481763019106577396688261393573590418", //sigX
    "4670268754090224810492676966567128460691441819810059675575673092251639253273", //sigy
    "2716981870054376425540623498944271869143173296821421331478826053599476430854", //pkxi
    "4207954545713722779397243242064268224396102704576018253000218082904392461892", //pkxr
    "15016217483528080919615640796038236162852104966225325968042839587187338783249", //pkyi
    "14823056799673950316800545417245630398819170129662340134056907505652527393990"), //pkyr
    "modified pubkey");
  })


})
